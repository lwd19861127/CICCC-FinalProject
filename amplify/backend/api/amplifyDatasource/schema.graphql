enum Status {
  ON
  OFF
}

enum Category {
    #好书推荐
    BookRecommendations
    #爸妈经验
    ParentalExperiences
    #成长记录
    GrowthRecord
    #育儿守则
    ParentingCode
    #生活点滴
    BitOfLife
    #家有学子
    ThereAreStudents
    #入学指南
    AdmissionGuide
    #良好教养
    WellEducated
    #健康安全
    HealthAndSafety
}

type User @model {
    id: ID!
    userName: String!
    userEmail: String
    favorites: [FavoriteArticles] @connection(keyName: "byUserFavorites", fields: ["id"])
    recentlyRead: [RecentlyReadArticles] @connection(keyName: "byUserRecentlyRead", fields: ["id"])
}

type Article @model
@key(name: "ArticleByStatusCreatedAt", fields: ["status", "createdAt"], queryField: "articleByStatusCreatedAt")
@key(name: "ArticleByStatusPriority",fields: ["status","priority"], queryField: "articleByStatusPriority"){
  id: ID!
  title: String!
  link: String!
  status: Status!
  priority: Int!
  createdAt: AWSDateTime!
  image: String
  categories: Category
  description: String
  favoriteReaders: [FavoriteArticles] @connection(keyName: "byArticleFavoriteReaders", fields: ["id"])
  recentlyReaders: [RecentlyReadArticles] @connection(keyName: "byArticleRecentlyReaders", fields: ["id"])
}

# Create a join model and disable queries as you don't need them
# and can query through User.favorites and Article.favoriteReaders
type FavoriteArticles
  @model(queries: null)
  @key(fields: ["userID", "articleID"])
  @key(name: "byUserFavorites", fields: ["userID", "articleID"])
  @key(name: "byArticleFavoriteReaders", fields: ["articleID", "userID"]) {
  id: ID!
  userID: ID!
  articleID: ID!
  user: User! @connection(fields: ["userID"])
  article: Article! @connection(fields: ["articleID"])
}

# Create a join model and disable queries as you don't need them
# and can query through User.recentlyRead and Article.recentlyReaders
type RecentlyReadArticles
  @model(queries: null)
  @key(fields: ["userID", "articleID"])
  @key(name: "byUserRecentlyRead", fields: ["userID", "articleID"])
  @key(name: "byArticleRecentlyReaders", fields: ["articleID", "userID"]) {
  id: ID!
  userID: ID!
  articleID: ID!
  user: User! @connection(fields: ["userID"])
  article: Article! @connection(fields: ["articleID"])
}

type Recommend
@model
 @key(fields: ["category"])
 @key(name: "RecommendByStatusPriority",fields: ["status","priority"], queryField: "recommendByStatusPriority"){
  id: ID!
  title: String!
  status: Status!
  category: Category!
  priority: Int!
  image: String
}
