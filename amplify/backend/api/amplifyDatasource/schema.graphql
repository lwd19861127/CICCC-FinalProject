enum Status {
  ON
  OFF
}

enum ArticleCategory {
    BookRecommendations
    ParentalExperiences
}

type User @model {
    id: ID!
    userName: String!
    userEmail: String
    favorites: [FavoriteArticles] @connection(keyName: "byUserFavorites", fields: ["id"])
    recentlyRead: [RecentlyReadArticles] @connection(keyName: "byUserRecentlyRead", fields: ["id"])
}

type Article @model {
  id: ID!
  title: String!
  date: AWSDateTime!
  link: String!
  status: Status!
  image: String
  categories: ArticleCategory
  priority: Int
  description: String
  favoriteReaders: [FavoriteArticles] @connection(keyName: "byArticleFavoriteReaders", fields: ["id"])
  recentlyReaders: [RecentlyReadArticles] @connection(keyName: "byArticleRecentlyReaders", fields: ["id"])
}

# Create a join model and disable queries as you don't need them
# and can query through User.favorites and Article.favoriteReaders
type FavoriteArticles
  @model(queries: null)
  @key(fields: ["userID", "articleID"])
  @key(name: "byUserFavorites", fields: ["userID", "articleID"])
  @key(name: "byArticleFavoriteReaders", fields: ["articleID", "userID"]) {
  id: ID!
  userID: ID!
  articleID: ID!
  user: User! @connection(fields: ["userID"])
  article: Article! @connection(fields: ["articleID"])
}

# Create a join model and disable queries as you don't need them
# and can query through User.recentlyRead and Article.recentlyReaders
type RecentlyReadArticles
  @model(queries: null)
  @key(fields: ["userID", "articleID"])
  @key(name: "byUserRecentlyRead", fields: ["userID", "articleID"])
  @key(name: "byArticleRecentlyReaders", fields: ["articleID", "userID"]) {
  id: ID!
  userID: ID!
  articleID: ID!
  user: User! @connection(fields: ["userID"])
  article: Article! @connection(fields: ["articleID"])
}
